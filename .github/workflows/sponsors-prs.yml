name: Create Sponsors Section PRs

on:
  workflow_dispatch:

jobs:
  sponsors-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GH_BOT_TOKEN }}" | gh auth login --with-token

      - name: Prepare and create PRs
        run: |
          git config --global user.email "sponsors-bot@hellang.com"
          git config --global user.name "Sponsors Bot"
          git config --global url.https://${{ secrets.GH_BOT_TOKEN }}@github.com/.insteadOf https://github.com/

          BRANCH_NAME="add-sponsors-section"
          PR_TITLE="Add Sponsors section to README"
          PR_BODY="This adds the standard Sponsors section to the README."
          SPONSORS_SECTION=$'\n## Sponsors\n\nThis is a test sponsors section'

          gh repo list khellang --source --visibility public --no-archived --limit 100 --json nameWithOwner \
            | jq -r '.[] | .nameWithOwner' | while read repo; do

            if [ "$repo" = "khellang/EFCore.Sqlite.NodaTime" ]; then
              echo "Skipping $repo (explicit exception)"
              continue
            fi

            echo "Checking $repo..."

            if gh api "repos/$repo/branches/$BRANCH_NAME" > /dev/null 2>&1; then
              echo "Branch $BRANCH_NAME already exists in $repo – skipping."
              continue
            fi

            gh repo clone "$repo" -- --depth=1
            cd "$(basename "$repo")" || continue

            if [ -f README.md ]; then
              # Strip existing Sponsors section
              awk '
                BEGIN { skip=0 }
                /^## Sponsors/ { skip=1; next }
                /^## [^ ]/ && skip==1 { skip=0 }
                skip==0 { print }
              ' README.md > README.tmp && mv README.tmp README.md
            
              echo "$SPONSORS_SECTION" >> README.md
            
              if git diff --quiet; then
                echo "No change in README – skipping commit."
              else
                # Check out or create branch
                if git ls-remote --exit-code --heads origin "$BRANCH_NAME" &> /dev/null; then
                  git fetch origin "$BRANCH_NAME"
                  git checkout "$BRANCH_NAME"
                else
                  git checkout -b "$BRANCH_NAME"
                fi
              
                git add README.md
                git commit -m "$PR_TITLE" || echo "Nothing to commit"

                # Force push to update existing remote branch
                git push origin "$BRANCH_NAME" --force
                
                # Check if PR already exists
                if ! gh pr list --head "$BRANCH_NAME" --state open --json number -q '.[0]'; then
                  gh pr create \
                    --title "$PR_TITLE" \
                    --body "$PR_BODY" \
                    --head "$BRANCH_NAME" \
                    --reviewer khellang \
                    --assignee khellang
                else
                  echo "PR already exists for $repo – updated branch with force push."
                fi
              fi
            else
              echo "README.md not found – skipping."
            fi

            cd ..
          done
